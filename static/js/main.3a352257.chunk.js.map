{"version":3,"sources":["components/Dialog/styles.ts","components/Dialog/index.tsx","components/TreeChart/index.jsx","hooks/useD3/index.ts","pages/TaxPage/styles.ts","pages/TaxPage/index.tsx","components/tables/TemplateTable/styles.ts","components/tables/TemplateTable/index.tsx","data/table1.ts","pages/MainPage/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","TitleWrapper","Dialog","show","setShow","node","Modal","onHide","Header","Title","name","Body","practice_id","origin","description","urls","map","url","index","href","WIDTH_IN_PX","DEFAULT_MARGIN_IN_PX","DEFAULT_MARGIN_IN_PX_ARRAY","wrap","text","width","each","word","d3","this","words","split","reverse","line","lineNumber","x","attr","y","tspan","append","pop","push","join","getComputedTextLength","stringToColour","str","i","hash","length","charCodeAt","colour","toString","substr","increaseBrightness","hex","percent","replace","r","parseInt","g","b","TreeChart","data","React","useState","setNode","margins","setMargins","ref","renderGraphFn","dependencies","useRef","useEffect","current","useD3","svg","tree","nodeSize","root","diagonal","x0","y0","descendants","forEach","id","_children","children","depth","baseLink","baseNode","update","sourceNode","nodes","links","left","right","eachBefore","height","transition","duration","tween","window","ResizeObserver","dispatch","selectAll","nodeEnter","enter","_node","on","_event","viewBox","level","Number","showDetail","parent","grandParent","colorName","hexColor","getNodeColor","style","call","clone","lower","merge","exit","remove","link","target","linkEnter","point","source","userSelect","Wrapper","TaxPage","onBackClick","onClick","sx","color","OverrideCss","TemplateTable","columns","tableHeight","DataGrid","rows","hideFooter","disableSelectionOnClick","disableColumnMenu","rowHeight","TABLE_1","TABLE_1_COLUMNS","field","headerName","type","MainPage","openTax","setOpenTax","Typography","variant","Button","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a352257.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const TitleWrapper = styled.div`\n  width: 460px;\n  overflow-wrap: break-word;\n`;\n","import * as React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { Container, TitleWrapper } from './styles';\n\ntype Node = {\n    id: number;\n    name: string;\n    description: string;\n    practice_id: string;\n    urls?: string[];\n    origin: string;\n    level: number;\n};\n\ntype Props = {\n    show: boolean;\n    setShow: (bool: boolean) => void;\n    node?: Node;\n};\n\nexport const Dialog: React.FC<Props> = ({ show, setShow, node }) => {\n    return (\n        <Modal show={show} onHide={() => setShow(false)}>\n            {node && (\n                <>\n                    <Modal.Header>\n                        <Modal.Title>\n                            <TitleWrapper>{node.name}</TitleWrapper>\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Container>\n                            <h6>\n                                ID {node.practice_id}\n                            </h6>\n                            <h6>Origin: {node.origin}</h6>\n                            <p>{node.description}</p>\n                            <h6>URLs</h6>\n                            {node.urls && node.urls.map((url, index) => <a href={url} key={index}>{url}</a>)}\n                        </Container>\n                    </Modal.Body>\n                </>\n            )}\n        </Modal>\n    );\n};\n","import * as d3 from 'd3';\nimport React from 'react';\n\nimport { useD3 } from '../../hooks/useD3';\nimport { Dialog } from '../Dialog';\n\nconst SVG_HEIGHT_IN_PX = 1600;\nconst WIDTH_IN_PX = 1500;\nconst X_NODE_SIZE = 28;\nconst MAX_DEPTH = 4;\nconst TRANSITION_DURATION = 250;\nconst Y_NODE_SIZE = WIDTH_IN_PX / MAX_DEPTH;\nconst DEFAULT_MARGIN_IN_PX = {\n    top: 10,\n    right: 0,\n    bottom: 10,\n    left: -30,\n};\nconst DEFAULT_MARGIN_IN_PX_ARRAY = [DEFAULT_MARGIN_IN_PX.left, -DEFAULT_MARGIN_IN_PX.top, WIDTH_IN_PX, X_NODE_SIZE];\n\n// https://stackoverflow.com/questions/24784302/wrapping-text-in-d3/24785497\nconst wrap = (text, width) => {\n    text.each(function () {\n        let text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 10, // ems\n            x = text.attr('x'),\n            y = text.attr('y'),\n            tspan = text.text(null).append('tspan').attr('x', x).attr('y', y);\n        while ((word = words.pop())) {\n            line.push(word);\n            tspan.text(line.join(' '));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(' '));\n                line = [word];\n                tspan = text\n                    .append('tspan')\n                    .attr('x', x)\n                    .attr('y', ++lineNumber * lineHeight + y)\n                    .text(word);\n            }\n        }\n    });\n};\n\nconst getNodeColor = (node) => {\n    if (node.data.name === 'Start') return '#262626';\n    else if (!node._children && node.data.level !== 3) return 'gray';\n    else {\n        const parent = node.parent;\n        const grandParent = parent.parent;\n        const colorName =\n            grandParent !== null\n                ? grandParent.data.name === 'Start'\n                    ? parent.data.name\n                    : grandParent.data.name\n                : parent.data.name === 'Start'\n                    ? node.data.name\n                    : parent.data.name;\n        const hexColor = stringToColour(colorName);\n        if (node.data.level === 1) return increaseBrightness(hexColor, 20);\n        else if (node.data.level === 2) return increaseBrightness(hexColor, 40);\n        else if (node.data.level === 3) return increaseBrightness(hexColor, 60);\n        else return 'gray';\n    }\n};\n\nconst stringToColour = (str) => {\n    let i;\n    let hash = 0;\n    for (i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 4) - hash);\n    }\n    let colour = '#';\n    for (i = 0; i < 3; i++) {\n        const value = (hash >> (i * 4)) & 0xff;\n        colour += ('00' + value.toString(26)).substr(-2);\n    }\n    return colour;\n};\n\nconst increaseBrightness = (hex, percent) => {\n    // strip the leading # if it's there\n    hex = hex.replace(/^\\s*#|\\s*$/g, '');\n\n    // convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`\n    if (hex.length === 3) {\n        hex = hex.replace(/(.)/g, '$1$1');\n    }\n\n    var r = parseInt(hex.substr(0, 2), 16),\n        g = parseInt(hex.substr(2, 2), 16),\n        b = parseInt(hex.substr(4, 2), 16);\n\n    return (\n        '#' +\n        (0 | ((1 << 8) + r + ((256 - r) * percent) / 100)).toString(16).substr(1) +\n        (0 | ((1 << 8) + g + ((256 - g) * percent) / 100)).toString(16).substr(1) +\n        (0 | ((1 << 8) + b + ((256 - b) * percent) / 100)).toString(16).substr(1)\n    );\n};\n\nexport const TreeChart = ({ data }) => {\n    const [show, setShow] = React.useState(false);\n    const [node, setNode] = React.useState();\n    const [margins, setMargins] = React.useState(DEFAULT_MARGIN_IN_PX_ARRAY);\n\n    const ref = useD3(\n        (svg) => {\n            const tree = d3.tree().nodeSize([X_NODE_SIZE, Y_NODE_SIZE]);\n            const root = d3.hierarchy(data);\n\n            const diagonal = d3\n                .linkHorizontal()\n                .x((node) => node.y)\n                .y((node) => node.x);\n\n            root.x0 = Y_NODE_SIZE;\n            root.y0 = 0;\n            root.descendants().forEach((node, i) => {\n                node.id = i;\n                node._children = node.children;\n                if (node.depth > 1) node.children = null;\n            });\n\n            const showDetail = (node) => {\n                const viewBox = svg.attr('viewBox').split(',');\n                if (node.data.level === 3) {\n                    setShow(true);\n                    setMargins([Number(viewBox[0]), Number(viewBox[1]), Number(viewBox[2]), Number(viewBox[3])]);\n                    setNode(node.data);\n                }\n            };\n\n            const baseLink = svg\n                .append('g')\n                .attr('fill', 'none')\n                .attr('stroke', 'black')\n                .attr('stroke-opacity', 0.5)\n                .attr('stroke-width', 1.5);\n\n            const baseNode = svg.append('g').attr('cursor', 'pointer').attr('pointer-events', 'all');\n\n            const update = (sourceNode) => {\n                const nodes = root.descendants().reverse();\n                const links = root.links();\n\n                // Compute the new tree layout.\n                tree(root);\n\n                let left = root;\n                let right = root;\n                root.eachBefore((node) => {\n                    if (node.x < left.x) left = node;\n                    if (node.x > right.x) right = node;\n                });\n\n                const height = right.x - left.x + DEFAULT_MARGIN_IN_PX.top + DEFAULT_MARGIN_IN_PX.bottom;\n\n                const transition = svg\n                    .transition()\n                    .duration(TRANSITION_DURATION)\n                    .attr('viewBox', [DEFAULT_MARGIN_IN_PX.left, left.x - DEFAULT_MARGIN_IN_PX.top, WIDTH_IN_PX, height])\n                    .tween('resize', window.ResizeObserver ? null : () => () => svg.dispatch('toggle'));\n\n                // Update nodes.\n                const node = baseNode.selectAll('g').data(nodes, (node) => node.id);\n\n                // Enter any new nodes at the parent's previous position.\n                const nodeEnter = node\n                    .enter()\n                    .append('g')\n                    .attr('transform', (_node) => `translate(${sourceNode.y0},${sourceNode.x0})`)\n                    .attr('fill-opacity', 0)\n                    .attr('stroke-opacity', 0)\n                    .on('click', (_event, node) => {\n                        if (node.depth === 0) return;\n                        node.children = node.children ? null : node._children;\n                        update(node);\n                        showDetail(node);\n                    });\n\n                nodeEnter\n                    .append('rect')\n                    .attr('width', 20)\n                    .attr('height', 15)\n                    .attr('rx', 5)\n                    .attr('ry', 5)\n                    .attr('y', -10)\n                    .attr('fill', (node) => getNodeColor(node));\n\n                nodeEnter\n                    .append('text')\n                    .attr('x', (node) => -2)\n                    .attr('text-anchor', (node) => 'end')\n                    .style('font-size', '12px')\n                    .text((node) => node.data.name)\n                    .call(wrap, 200)\n                    .clone(true)\n                    .lower()\n                    .attr('stroke-linejoin', 'round')\n                    .attr('stroke-width', 2)\n                    .attr('stroke', 'white');\n\n                // Transition nodes to their new position.\n                node\n                    .merge(nodeEnter)\n                    .transition(transition)\n                    .attr('transform', (node) => `translate(${node.y},${node.x})`)\n                    .attr('fill-opacity', 1)\n                    .attr('stroke-opacity', 1);\n\n                // Transition exiting nodes to the parent's new position.\n                node\n                    .exit()\n                    .transition(transition)\n                    .remove()\n                    .attr('transform', (_node) => `translate(${sourceNode.y},${sourceNode.x})`)\n                    .attr('fill-opacity', 0)\n                    .attr('stroke-opacity', 0);\n\n                // Add the link between the nodes\n                const link = baseLink.selectAll('path').data(links, (node) => node.target.id);\n\n                // Enter any new links at the parent's previous position.\n                const linkEnter = link\n                    .enter()\n                    .append('path')\n                    .attr('d', (_node) => {\n                        const point = { x: sourceNode.x0, y: sourceNode.y0 - 30 };\n                        return diagonal({ source: point, target: point });\n                    });\n\n                // Transition links to their new position.\n                link.merge(linkEnter).transition(transition).attr('d', diagonal);\n\n                // Transition exiting nodes to the parent's new position.\n                link\n                    .exit()\n                    .transition(transition)\n                    .remove()\n                    .attr('d', (_node) => {\n                        const point = { x: sourceNode.x, y: sourceNode.y };\n                        return diagonal({ source: point, target: point });\n                    });\n\n                // Stash the old positions for transition.\n                root.eachBefore((node) => {\n                    node.x0 = node.x;\n                    node.y0 = node.y;\n                });\n            };\n\n            update(root);\n        },\n        [data.length],\n    );\n\n    return (\n        <>\n            <Dialog show={show} node={node} setShow={setShow} />\n            <div style={{ height: '100%', width: WIDTH_IN_PX }}>\n                <svg\n                    ref={ref}\n                    viewBox={[margins]}\n                    style={{\n                        // height: svgHeight,\n                        height: SVG_HEIGHT_IN_PX,\n                        width: '100%',\n                        userSelect: 'none',\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nexport const useD3 = (renderGraphFn: (selection: d3.Selection<d3.BaseType, unknown, HTMLElement, any>) => void, dependencies: React.DependencyList) => {\n  const ref = React.useRef();\n\n  React.useEffect(() => {\n    renderGraphFn(d3.select(ref.current!));\n    return () => {};\n  }, dependencies);\n\n  return ref;\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  text-align: left;\n`;\n","import * as React from 'react';\nimport {TreeChart} from \"../../components/TreeChart\";\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport {Wrapper} from \"./styles\";\n\ntype Props = {\n  data: any;\n  onBackClick: () => void;\n}\nexport const TaxPage: React.FC<Props> = ({data, onBackClick}) => {\n\n  return (\n    <Wrapper>\n      <ArrowBackIcon onClick={onBackClick} sx={{color: \"#2f6ed4\"}} />\n      <TreeChart data={data}/>\n    </Wrapper>\n  )\n\n}\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div<{height: number}>`\n  height: ${({height}) => height}px;\n  padding: 20px;\n`;\n\nexport const OverrideCss = styled.div`\n  .MuiDataGrid-columnHeaderTitle {\n    overflow: unset;\n    text-overflow: unset;\n    white-space: normal;\n    line-height: initial;\n    font-weight: 600;\n  }\n  \n  .MuiDataGrid-columnHeaderTitleContainer{\n    white-space: normal;\n  }\n  \n  .MuiDataGrid-columnHeaders{\n    max-height: fit-content !important;\n    line-height: unset !important;\n  }\n  \n  .MuiDataGrid-row{\n    height: auto !important;\n    max-height: 100% !important;\n  }\n  \n  .MuiDataGrid-cell {\n    max-height: 100% !important;\n    white-space: break-spaces !important;\n  }\n  \n  .MuiDataGrid-cellContent {\n    overflow-wrap: anywhere !important;\n  }\n  \n  .MuiDataGrid-virtualScroller {\n    overflow-y: scroll !important;\n  }\n`;\n\n","import * as React from 'react';\nimport { DataGrid, GridColDef } from '@mui/x-data-grid';\nimport {Wrapper, OverrideCss} from \"./styles\";\n\ntype Props = {\n  columns: GridColDef[];\n  data: any;\n  tableHeight?: number;\n}\n\nexport const TemplateTable: React.FC<Props> = ({columns, data, tableHeight= 400}) => {\n  return (\n      <OverrideCss>\n        <Wrapper height={tableHeight}>\n          <DataGrid\n            rows={data}\n            columns={columns}\n            hideFooter\n            disableSelectionOnClick\n            disableColumnMenu\n            rowHeight={60}\n          />\n        </Wrapper>\n      </OverrideCss>\n  )\n}\n","export const TABLE_1 = [\n  {\n    \"id\": \"Mr1\",\n    \"Phase Category\": \"Requirement definition\",\n    \"Subcategory\": \"Metric selection\",\n    \"Description\": \"The goal of the model that is going to be trained should be considered when selecting the most appropriate metrics for assessing the model performance.\",\n    \"Number of experts that validated the practice\": 4,\n    \"STE Post(s)\": \"https://datascience.stackexchange.com/questions/82012\",\n    \"External URL(S) associated to the post\": \"https://imbalanced-learn.org/stable/\"\n  },\n  {\n    \"id\": \"Mr2\",\n    \"Phase Category\": \"Requirement definition\",\n    \"Subcategory\": \"Retraining model\",\n    \"Description\": \"It is important to identify the needs/requirements of model retraining.\",\n    \"Number of experts that validated the practice\": 4,\n    \"STE Post(s)\": \"https://stackoverflow.com/questions/56859324\",\n    \"External URL(S) associated to the post\": \"-\"\n  },\n  {\n    \"id\": \"Mr3\",\n    \"Phase Category\": \"Requirement definition\",\n    \"Subcategory\": \"External services\",\n    \"Description\": \"If an ML model is published as a cloud service, specifically, when a classification/prediction task uses ML cloud-based services, it is important to define the use case and the model requirements in order to identify how frequently the service should be invoked.\",\n    \"Number of experts that validated the practice\": 4,\n    \"STE Post(s)\": \"https://stackoverflow.com/questions/56859324\",\n    \"External URL(S) associated to the post\": \"-\"\n  },\n  {\n    \"id\": \"Mr4\",\n    \"Phase Category\": \"Requirement definition\",\n    \"Subcategory\": \"Probabilistic model\",\n    \"Description\": \"When using probabilistic forecasting in a decision system, it is necessary to decouple the probabilistic model optimization from the probability threshold selection.\",\n    \"Number of experts that validated the practice\": 3,\n    \"STE Post(s)\": \"https://stats.stackexchange.com/questions/405622\",\n    \"External URL(S) associated to the post\": \"https://stats.stackexchange.com/questions/390186/is-decision-threshold-a-hyperparameter-in-logistic-regression\\nhttps://stats.stackexchange.com/a/405049/1352\\nhttps://www.fharrell.com/post/classification/\"\n  }\n];\n\nexport const TABLE_1_COLUMNS = [\n  { field: 'id', headerName: \"ID\", width: 160 },\n  { field: 'Phase Category', headerName: \"Phase Category\", width: 160 },\n  { field: 'Subcategory', headerName: \"Subcategory\", width: 160 },\n  { field: 'Description', headerName: \"Description\", width: 250 },\n  { field: 'Number of experts that validated the practice', headerName: \"Number of experts that\" +\n      \" validated the practice\", width: 170, type: 'number', },\n  { field: 'STE Post(s)', headerName: \"STE Post(s)\", width: 160 },\n  { field: 'External URL(S) associated to the post', headerName: \"External URL(S) associated to\" +\n      \" the post\", width: 250 },\n];\n","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\nimport {TaxPage} from \"../TaxPage\";\nimport {TemplateTable} from \"../../components/tables/TemplateTable\";\n\nimport {TABLE_1_COLUMNS, TABLE_1} from \"../../data/table1\";\n\ntype Props = {\n  data: any;\n}\n\nexport const MainPage: React.FC<Props> = ({data}) => {\n  const [openTax, setOpenTax] = React.useState(false);\n\n  return (\n    <>\n      {!openTax ? <>\n          <h1>Online Appendix</h1>\n          <Typography variant=\"h5\">Taxonomy</Typography>\n          <Button onClick={() => setOpenTax(true)}>Open chart</Button>\n          <br/>\n          <br/>\n          <Typography variant=\"h5\">Some chart</Typography>\n          <TemplateTable data={TABLE_1} columns={TABLE_1_COLUMNS} tableHeight={500}/>\n        </>\n        : <TaxPage data={data} onBackClick={() => setOpenTax(false)}/>}\n    </>\n  )\n\n}\n","import React from \"react\";\nimport {MainPage} from \"./pages/MainPage\";\nimport data from './data/dataDef.json';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage data={data}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}